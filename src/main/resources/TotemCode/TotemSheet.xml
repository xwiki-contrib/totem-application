<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>TotemCode</web>
  <name>TotemSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>TotemCode.TotemClass</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1399932000000</creationDate>
  <date>1425487504000</date>
  <contentUpdateDate>1425460342000</contentUpdateDate>
  <version>1.1</version>
  <title>#if($doc.name == 'TotemSheet')Totem Sheet#{else}$services.display.title($doc, {'displayerHint': 'default'})#end</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>051ad43d-c5cc-4f31-9032-9fb070f3e28e</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function (XWiki) {
  var widgets = XWiki.widgets = XWiki.widgets || {};
  widgets.TotemEditor = Class.create({
  initialize: function() {
    this.hookEditOrder();
    $$('.totemBlocks .totemBlock').each(function(item){
      this.hookDeleteButton(item);
    }.bind(this));
 },
  
  hookEditOrder : function () {
    // find the editorder form
    var editForm = $$('form.editorderform')[0];
    if (!editForm) {
      return;
    }
    this.editOrderForm = editForm;
    // find the input
    // this name is not always the same here, but will work in 80% of the cases, at least
    var orderInput = editForm.down("input[name='TotemCode.TotemClass_0_blockOrder']")
    if (!orderInput) {
      return;
    }
    this.blockOrderInput = orderInput;
    this.setupDragDrop();
    // hide the input and disable the save button until a change is made
    this.blockOrderInput.addClassName('hidden');
    // find the button and disable it
    var saveButton = editForm.down('input[type=submit]');
    if (saveButton) {
      saveButton.writeAttribute('disabled', 'disabled');
    }
  },
  
  setupDragDrop : function() {
    var onMove = this.onBlockMoved.bind(this);
    Sortable.create('totemBlocks', {
      tag: 'div',
      only: 'totemBlock',
      handle: 'blocktitle', 
      overlap: 'vertical', 
      scroll: window, 
      dropOnEmpty: true, 
      constraint: false,
      ghosting: false,
      hoverclass: 'blocktitle-hover-highlight',
      onUpdate: onMove
    });
  },
  
  onBlockMoved : function() {
    // write the new block order
    var newBlockOrder = $$('.totemBlock').collect(function(item) { return item.readAttribute('id').substring(11); }).join(',');
    this.blockOrderInput.value = newBlockOrder;
    // enable the save button
    var saveButton = this.editOrderForm.down('input[type=submit]');
    if (saveButton) {
      saveButton.writeAttribute('disabled', false);
    }
  },
  
  hookEditButton : function(totemBlockItem) {
    // find the edit button in the actions
    var editButton = totemBlockItem.down('.editactions .editbutton');
    if (!editButton) {
      return;
    }
    editButton.observe('click', function(event) {
      // find the edit form and show it
      var editForm = totemBlockItem.down('.editblockform');
      if (!editForm) {
        return;
      }
      // we have an edit form, stop the event
      event.stop();
      editForm.removeClassName('hidden');
      var blockDisplayer = totemBlockItem.down('.blockdisplayer');
      if (blockDisplayer) {
        blockDisplayer.addClassName('hidden');
      }
      var editSourceForm = totemBlockItem.down('.editsourceblockform');
      if (editSourceForm) {
        editSourceForm.addClassName('hidden');
      }
    });
    // find the cancel button of this edit form and make it hide the form
    var cancelButton = totemBlockItem.down('.editblockform a.cancelbutton');
    if (cancelButton) {
      cancelButton.observe('click', function(event){
        var editForm = event.findElement('.editblockform');
        if (!editForm) {
          return;
        }
        event.stop();
        editForm.addClassName('hidden');
        var blockDisplayer = totemBlockItem.down('.blockdisplayer');
        if (blockDisplayer) {
          blockDisplayer.removeClassName('hidden');
        }
      }.bind(this));
    }
  },
  
  hookEditSourceButton : function(totemBlockItem) {
    // find the edit button in the actions
    var editSourceButton = totemBlockItem.down('.editactions .editsourcebutton');
    if (!editSourceButton) {
      return;
    }
    editSourceButton.observe('click', function(event) {
      // find the edit form and show it
      var editSourceForm = totemBlockItem.down('.editsourceblockform');
      if (!editSourceForm) {
        return;
      }
      // we have an edit form, stop the event
      event.stop();
      editSourceForm.removeClassName('hidden');
      var blockDisplayer = totemBlockItem.down('.blockdisplayer');
      if (blockDisplayer) {
        blockDisplayer.addClassName('hidden');
      }
      var editForm = totemBlockItem.down('.editblockform');
      if (editForm) {
        editForm.addClassName('hidden');
      }
    });
    // find the cancel button of this edit form and make it hide the form
    var cancelButton = totemBlockItem.down('.editsourceblockform a.cancelbutton');
    if (cancelButton) {
      cancelButton.observe('click', function(event){
        var editForm = event.findElement('.editsourceblockform');
        if (!editForm) {
          return;
        }
        event.stop();
        editForm.addClassName('hidden');
        var blockDisplayer = totemBlockItem.down('.blockdisplayer');
        if (blockDisplayer) {
          blockDisplayer.removeClassName('hidden');
        }
      }.bind(this));
    }
  },
  
  hookDeleteButton : function(totemBlockItem) {
    // get the delete form and add a conversation message to the submit
    var deleteForm = totemBlockItem.down('form.removeblockform');
    if (!deleteForm) {
      return;
    }
    deleteForm.observe('submit', function(event){
      event.stop();
      var _this = event.findElement('form.removeblockform');
      new XWiki.widgets.ConfirmationBox(
        {
          onYes : function() {_this.submit();},
        },
        {confirmationText: "$escapetool.javascript($services.localization.render('totem.edit.removeitem.confirmation'))",}
        )
    }.bind(this));
  }
});
  return XWiki;
}(XWiki || {}));

document.observe('xwiki:dom:loading', function() {
  new XWiki.widgets.TotemEditor();
});</code>
    </property>
    <property>
      <name>Totem javascript</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>7ceb9a37-4b00-4549-806f-6e2c62429505</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// Configure require.js to use Colpick (https://github.com/josedvq/colpick-jQuery-Color-Picker/) and jquery-form (https://github.com/malsup/form)
require.config({
  paths: {
    'colpick': '$services.webjars.url('colpick/2.0.2/js/colpick.js')',
    'jquery-form': '$services.webjars.url('jquery-form/3.51/jquery.form.js')'    
  },
  shim: {
    'colpick' : ['jquery'],
    'jquery-form': ['jquery']
  }
});</code>
    </property>
    <property>
      <name>Color picker - jquery form plugins</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>31a5edfd-5305-444c-b817-fc604f35a422</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// This code was moved in Modal Popup Javascript
// document.observe('xwiki:dom:loaded', function() {
//   // Use JQuery
//   require(['jquery'], function($) {
//     // The following script will allow to update the hidden input data with the specific additional data for displayers
//     // Additonal Datas are displayed as individual input and are all saved in a common textarea field.
//     // ****
//     function updateHiddenInputData() {
//       // get displayer additonal data inputs
//       var additionalDataInputList = $('.displayerAdditionalData');
//       additionalDataInputList.each( function() {
//         // observe Change event
//         $(this).change(function() {
//           var dataValues = "";
//           // get the list of input with class .displayerAdditionalData from the parent
//           var additionalDataParent = $(this).parent().parent();
//           var total = additionalDataParent.find('.displayerAdditionalData').length;
//           additionalDataParent.find('.displayerAdditionalData').each( function(index) {
//             // store field data
//             dataValues += $(this).attr('name') + ":" + $(this).val();
//             if (index != total - 1) {
//               dataValues += ",";
//             }
//           });
//           // update the data hidden input
//           additionalDataParent.find('input[type=hidden]').val(dataValues);
//         });
//       });
//     }
//     // call our updateHiddenInputData function
//     updateHiddenInputData();
//     updateHiddenInputData();
//     updateHiddenInputData();
//     // update the additional specific to match the selected displayer
//     $("select[id*='type']").change( function() {
//       // get the addtional data container
//       var additionalDataDiv = $(this).parents().eq(2).find('.additionalData');
//       // TotemCode.TotemAdditionalDataDisplayer page is used to build the displayer specific input
//       // we build the url to access it
//       var additionalDataDisplayerUrl = "$xwiki.getURL('TotemCode.TotemAdditionalDataDisplayer', 'get', '')?totem=" + $(this).val();
//       additionalDataDisplayerUrl += "&amp;totemBlock=" + $(this).closest(".totemBlock").attr("id")
//       // then we call it in ajax
//       $.ajax({
//         url: additionalDataDisplayerUrl,
//       }).done(function( html ) {
//         // update the additionalData container
//         $(additionalDataDiv).html(html);
//         // bind the new inputs
//         updateHiddenInputData();
//       });
//     });
//   });
// });
</code>
    </property>
    <property>
      <name>Displayer additional Data </name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>20888b66-d110-4366-812e-c3c349ff4e07</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require (['jquery', 'jquery-form'], function($, jqf) {
$.extend({
// Method to intialize edit forms
initializeEditForm : function(editFormURL,XWModalContent) {
   $(".xdialog-box").addClass("xwmlrg");

    // Initialize color pickers
    require(['colpick'], function(Colpick) {
       $.initColorPickers();
    });

   // Initialize attachment-picker fields
   $(".attachment-picker-start").click(function(event) {
      var form = $("form",$(this).parents());
      if (form.length &gt; 0) {
        form = form.last();
        var data = form.serialize();
        editFormURL+= "&amp;" + data;
      }
      var attPickerURL = $(this).attr("href") + "&amp;xpage=plain";
      var totemDocRef = $("#totemDocRef").val();
      attPickerURL = attPickerURL.replace("?docname=TotemCode.EditContent&amp;","?docname=" + encodeURIComponent(totemDocRef) + "&amp;");
      $.initAttachmentPicker(editFormURL,attPickerURL,XWModalContent);
      event.preventDefault();
   });

   // Intialize save button
   $(".saveBlockBtn").click(function(event) {
       var form = $("form",$(this).parents());
       if (form.length &gt; 0) {
          form = form.last();
          var data = form.serialize();
          var actionURL = form.attr("action") + "&amp;" + data;
          $(XWModalContent).addClass("ajaxloader");
          $.ajax({
	      url: actionURL,
	      type: 'GET',
              complete:function(event, XMLHttpRequest, ajaxOptions) {
                 // Redirect
                 var redirectURL = $("#redirectURL").val();
                 document.location.replace(redirectURL);   
              }
	  });
       }
       event.preventDefault();
   });

   // Intialize cancel button
   $("a.cancelbutton").click(function(event) {
      $(".xdialog-close").click();
      event.preventDefault();
   });
},

// Method to intialize color pickers
initColorPickers : function() {
    // Get the inputs that need to be enhanced
    $('.color-picker').each(function(index) {
         var input = $(this);
         var parent = $(this).parent();
         // Create the color preview box
         parent.append('&lt;div class="input-group-addon color-preview"&gt;&lt;/div&gt;');
         // Update the color preview box
         $(".color-preview",parent).css('background-color', input.val());
         // Enable the color picker
         $(this).colpick({
             layout: 'hex',
             submit: true,
             color: $(this).val(),
             onShow: function(colpickobj) {
                $(colpickobj).css("z-index","99999");
             },
             onSubmit: function(hsb, hex, rgb, el) {
                var element = $(el);
                // Hide the color picker
                element.colpickHide();
                // Update the filled value
                element.val('#'+hex);
                // Update the color preview box
                $(".color-preview",element.parent()).css('background-color', '#'+hex);
                // Emit the "change" event
                element.trigger('change');
             }
         });
         // If the user write a value manually
         input.keyup(function(event) {
            // Update the color preview box
            $('.color-preview',$(this).parent()).css('background-color', $(this).val());
            // Update the color picker
            $(this).colpickSetColor($(this).val(), false);
         });
    });
},

// Method to intialize the attachment picker after loading it
initAttachmentPicker : function(editFormURL,attPickerURL,XWModalContent) {
 $(XWModalContent).addClass("ajaxloader");
 $(XWModalContent).load(attPickerURL,function() {
 $(XWModalContent).removeClass("ajaxloader");
   // Initialize attachment picker btns
   $("input[name='action_upload'][type='submit']").click(function(event) {
      // Check input file filed
      if ($("#attachfile").val() == "") {// Empty field
           new XWiki.widgets.Notification("$services.localization.render('xe.attachmentSelector.upload.error.noFile')", 'error');
      }
      else
      {
           // Check allowed extensions
           var allowedExts = $("#attachfile").attr("title");
           allowedExts = (allowedExts != "") ? allowedExts.split(', ') : new Array();
           var fileExt = null;
           var filename = $("#attachfile").val();
           var fpath = filename.replace('\\', '/');
           var pieces = fpath.split('/');
           if (pieces.length &gt; 0) {
               var basename = pieces[pieces.length-1];
               pieces = basename.split('.');
               fileExt = pieces[pieces.length-1].toLowerCase();
           }
           if (fileExt &amp;&amp; allowedExts.indexOf(fileExt) == -1) {
               new XWiki.widgets.Notification("$services.localization.render('xe.attachmentSelector.upload.error.badExtension')", 'error');
           }
           else{
               new XWiki.widgets.Notification("$services.localization.render('xe.attachmentSelector.upload.inProgress')", 'inprogress');
               $('#uploadAttachment').ajaxSubmit({
                  success: function() {
                     // Reload the page after upload
                     $(".xnotification-inprogress").remove();
                     $.initAttachmentPicker(editFormURL,attPickerURL,XWModalContent);  
                  }
               });
             }  
           }
           event.preventDefault();
        });
        // Initialize delete attachment btns
        $("a.delete").click(function(event) {
            var deleteURL = $(this).attr("href");
            var attElem =  $(this).parents().eq(3);
            new XWiki.widgets.ConfirmationBox({onYes: function() {
               new XWiki.widgets.Notification("$services.localization.render('core.viewers.attachments.delete.inProgress')",'inprogress');
               $.ajax({
	          url: deleteURL,
		  type: 'POST',
		  complete: function(event, XMLHttpRequest, ajaxOptions){
                     $(".xnotification-inprogress").remove();
                     new XWiki.widgets.Notification("$services.localization.render('core.viewers.attachments.delete.done')","done");
                     attElem.remove();
                  }
	       });
            }}, {confirmationText:"$services.localization.render('core.viewers.attachments.delete.confirm')"});
            event.preventDefault();
        });
        // Initialize select attachment btns
        $("a.select").click(function(event) {
            var selectURL = $(this).attr("href");
            new XWiki.widgets.Notification("Selecting",'inprogress');
            $.ajax({
	       url: selectURL,
	       type: 'POST',
	       complete:function(event, XMLHttpRequest, ajaxOptions) {
                  $(".xnotification-inprogress").remove();
                  new XWiki.widgets.Notification("Attachment selected","done");
                  // Reload form with selected image modal
                  $(XWModalContent).load(editFormURL,function() {
                     $.initializeEditForm(editFormURL,XWModalContent);
                  });
               }
	    });
            event.preventDefault();
        });
        // Initialize attachment picker close button
        $("#attachment-picker-close").click(function(event) {
           // Reload edit item form
           $(XWModalContent).load(editFormURL,function() {
              $.initializeEditForm(editFormURL,XWModalContent);
           });
           event.preventDefault();
        });
    });
}
});
});

require(['jquery'], function ($) {
$(function() {
      // Initialize edit Totem buttons
      $(".editbutton").click(function(event) {
           event.preventDefault();
           var blockNumber = $(this).attr("rel");
           var totemDocRef = $("#totemDocRef").val();
           var editContentURL = "$xwiki.getURL('TotemCode.EditContent','edit','xpage=plain&amp;editor=inline')";
           var editURL = editContentURL + "&amp;action=editTotemBlock" + "&amp;totemDocRef=" + encodeURIComponent(totemDocRef) + "&amp;blockNumber=" + blockNumber;
           $('.xdialog-modal-container').remove();
           new XWiki.widgets.TotemModalPopup({pageURL: editURL});
      });
      // Initialize edit section elements buttons
      $(".editsourcebutton").click(function(event) {
           // Clear the old content of the modal popup
           $('.xdialog-modal-container').remove();
           var blockNumber = $(this).attr("rel");
           var totemDocRef = $("#totemDocRef").val();
           var editContentURL = "$xwiki.getURL('TotemCode.EditContent','view','xpage=plain')";
           var editURL = editContentURL + "&amp;action=editTotemBlockSource" + "&amp;totemDocRef=" + totemDocRef + "&amp;blockNumber=" + blockNumber;
           new XWiki.widgets.TotemModalPopup({pageURL: editURL});
           event.preventDefault();
      });

      // Initialize add section buttons
      $(".addsection").click(function(event) {
           var totemDocRef = $("#totemDocRef").val();
           var editContentURL = "$xwiki.getURL('TotemCode.EditContent','edit','xpage=plain&amp;editor=inline')";
           var editURL = editContentURL + "&amp;action=newTotemBlock" + "&amp;totemDocRef=" + encodeURIComponent(totemDocRef);
           $('.xdialog-modal-container').remove();
           new XWiki.widgets.TotemModalPopup({pageURL: editURL});
           event.preventDefault();
      });
   });// endReady
});</code>
    </property>
    <property>
      <name>Edit Totem content on page</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>3b79fee2-e42a-4ea9-be0c-a56ced392396</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// Make sure the XWiki 'namespace' and the ModalPopup class exist.
if (typeof(XWiki) == "undefined" || typeof(XWiki.widgets) == "undefined" || typeof(XWiki.widgets.ModalPopup) == "undefined") {
 if (typeof console != "undefined" &amp;&amp; typeof console.warn == "function") {
    console.warn("[MessageBox widget] Required class missing: XWiki.widgets.ModalPopup");
  }
} else {

XWiki.widgets.TotemModalPopup = Class.create(XWiki.widgets.ModalPopup, {
 /** Default parameters can be added to the custom class. */
  defaultInteractionParameters : {
  },
 /** Constructor. Registers the key listener that pops up the dialog. */
  initialize : function($super, interactionParameters) {
   this.interactionParameters = Object.extend(Object.clone(this.defaultInteractionParameters), interactionParameters || {});
    // call constructor from ModalPopup with params content, shortcuts, options
    $super(
     this.createContent(this.interactionParameters),
      {
       "show"  : { method : this.showDialog,  keys : [] },
       "close" : { method : this.closeDialog, keys : ['Esc'] }
      },
      {
         displayCloseButton : true, 
         verticalPosition : "top",
         backgroundColor : "#FFF"
      }
    );
   this.showDialog();
   this.setClass("my-modal-popup");
  },
 /** Get the content of the modal dialog using ajax */
  createContent : function (data) {
    var content =  new Element('div', {'class': 'modal-popup'});
    // get page content for the pageURL
    new Ajax.Request(data.pageURL,
    {
      method:'get',
      onSuccess: function(transport) {
        //
        // Start Displayer additional Data management
        //
        // Use JQuery
        require(['jquery'], function($) {
          // The following script will allow to update the hidden input data with the specific additional data for displayers
          // Additonal Datas are displayed as individual input and are all saved in a common textarea field.
          // ****
          function updateHiddenInputData() {
            // get displayer additonal data inputs
            var additionalDataInputList = $('.displayerAdditionalData');
            additionalDataInputList.each( function() {
              // observe Change event
              $(this).change(function() {
                var dataValues = "";
                // get the list of input with class .displayerAdditionalData from the parent
                var additionalDataParent = $(this).parent().parent();
                var total = additionalDataParent.find('.displayerAdditionalData').length;
                additionalDataParent.find('.displayerAdditionalData').each( function(index) {
                  // store field data
                  dataValues += $(this).attr('name') + ":" + $(this).val();
                  if (index != total - 1) {
                    dataValues += ",";
                  }
                });
                // update the data hidden input
                additionalDataParent.find('input[type=hidden]').val(dataValues);
              });
            });
          }
          // call our updateHiddenInputData function
          updateHiddenInputData();
          // update the additional specific to match the selected displayer
          $("select[id*='type']").change( function() {
            // get the addtional data container
            var additionalDataDiv = $(this).parents().eq(2).find('.additionalData');
            // TotemCode.TotemAdditionalDataDisplayer page is used to build the displayer specific input
            // we build the url to access it
            var additionalDataDisplayerUrl = "$xwiki.getURL('TotemCode.TotemAdditionalDataDisplayer', 'get', '')?totem=" + $(this).val();
            additionalDataDisplayerUrl += "&amp;totemBlock=" + $(this).closest(".totemBlock").attr("id")
            // then we call it in ajax
            $.ajax({
              url: additionalDataDisplayerUrl,
            }).done(function( html ) {
              // update the additionalData container
              $(additionalDataDiv).html(html);
              // bind the new inputs
              updateHiddenInputData();
            });
          });
        });
        //
        //
        var response = transport.responseText || "no response text";
        content.insert(response);
        require(['jquery'],function($) {
           $.initializeEditForm(data.pageURL,content);
           // Init items suggest picker
           // Set the current vertical position of the scroll bar to 0.
           // if we do not do that the results of the suggest picker will not be displayed in the popup.
           // TODO : fix this issue directly in the SuggestDisplayPicker extension.
           $(document).scrollTop(0);
           var suggestInput = $('input[id$="_source"]');
           if (!suggestInput.hasClass('suggested')) {
             suggestInput = $('input[id$="_source_suggest"]');
           }
           if(suggestInput.length &gt; 0) {
             new XWiki.widgets.SuggestDisplayPicker(suggestInput.get(0));
           }
        });
       },
      onFailure: function(){ content.insert('Something went wrong...'); 
    }
    });

    return content;
  }
});
} // if the parent widget is defined</code>
    </property>
    <property>
      <name>Use XWiki Modal Popup</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>ad3ccc13-bcaf-4352-82cc-4f076e90b678</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.totemBlock .removeblockform {
  display: inline;
}

.totemBlock .editactions {
  /*text-align: right;*/
}

.totemBlocksEdit .blocktitle {
   cursor: move;
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Totem editor stylesheet</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>ec0a0939-5617-4be2-bf54-e19958e01de5</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.loadingModal {
   background-image: url("$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')");
   background-repeat: no-repeat;
   background-position: center;
}
.xwmlrg {
   width:90%;
}
.ajaxloader {
   background-image: url("$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')");
   background-repeat: no-repeat;
   background-position: center;
   height: 100px
}
.ajaxloader div,.ajaxloader form {
   display:none;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Edit Totem on page CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <content>{{include reference='DisplayerCode.DisplayerMacros' /}}

{{include reference='TotemCode.TotemMacros' /}}

{{velocity output="false"}}
$xwiki.ssx.use('DisplayerCode.DisplayerMacros')
{{/velocity}}

{{velocity}}
#set($xwikipanelwidth = 0)
#set($rightPanelsWidth= 0)

## set a couple of constants that we want to be able to edit fast.
## 1/ class items of the totem
#set($totemItemClass = 'TotemCode.SimpleTotemItemClass')
## 2/ a couple of mappings between the different types of blocks and the items from this totem class that should be used. 
## TODO: Normally this should be demanded by the sheet somehow but I don't know exactly how for now :(
## NOTE: This approach base is no used for the moment
#set($sheetFieldsMapping = {'DisplayerCode.ListDisplayerSheet' : ['date', 'doc.title', 'url'],  'DisplayerCode.EvenementDisplayer' : ['image', 'doc.title', 'url']})
## 3/ the page where the items to be displayed in totem blocks are held: the page called items in the current space
#set($totemItemsURL = $xwiki.getURL('Items'))
## figure out if we're in edit mode. If we are but the document is loaded for editing in the wysiwyg, then pretend we're in view :) -- this makes include work
#set($isEdit = ($xcontext.action == "inline" || $xcontext.action == "edit") &amp;&amp; "$!request.xpage" != 'wysiwyginput')
#set($enableEdit = "$!request.showEdit" == "true")
#if (!$hasEdit)
  ## if user does not have edit right, editing is not enabled
  #set($enableEdit = false)
#end
## put the edit url in a var, so that we go to the edit mode using this url whenever needed
#set($editURL = $doc.getURL('view', 'showEdit=true'))
#if (!$isEdit)
  ## include the extra ssx / jsx for the totem, as set in the totem object
  #set($extraSSX = $doc.getObject('TotemCode.TotemClass').getProperty('ssx').value)
  #if("$!extraSSX" != "")
    #set($discard = $xwiki.ssx.use($extraSSX))
  #end
  #set($extraJSX = $doc.getObject('TotemCode.TotemClass').getProperty('jsx').value)
  #if("$!extraJSX" != "")
    #set($discard = $xwiki.jsx.use($extraJSX))
  #end
  ## if edit is enabled, add the jsx and the ssx of the totemsheet (for enhancements of the edit form)
  ## IMHO no ssx/jsx from the sheet should be needed in view mode, I don't see any totem generic styling that could be done in view mode: 
  ## displayers will do their styling for blocks, the extra jsx / ssx will handle styling specific to a particular totem.

    #set($discard = $xwiki.jsx.use('TotemCode.TotemSheet'))
  #if ($enableEdit)
    #set($discard = $xwiki.jsfx.use("js/scriptaculous/effects.js"))
    #set($discard = $xwiki.jsfx.use("js/scriptaculous/dragdrop.js"))
    #set($discard = $xwiki.jsx.use('TotemCode.TotemSheet', {'minify' : false}))
    #set($discard = $xwiki.ssx.use('TotemCode.TotemSheet', {'minify' : false}))
    ## JS/CSS code used in manage totem items in popups
    #set($discard = $xwiki.jsx.use('XWiki.SuggestDisplay', {'minify' : false}))
    #set($discard = $xwiki.ssx.use('XWiki.SuggestDisplay', {'minify' : false}))
    #set($discard = $xwiki.jsx.use('XWiki.SuggestDisplayEditItems', {'minify' : false}))
    #set($discard = $xwiki.ssx.use('XWiki.SuggestDisplayEditItems', {'minify' : false}))
    {{html}}
    #wysiwyg_import(true)
    {{/html}}

  #end
  ## pass the totem application fullscreen
  #set($enableFullscreen = $doc.getObject('TotemCode.TotemClass').getProperty('fullscreen').value)
  #if($enableFullscreen == 1 )
    #set($discard = $xwiki.ssx.use('TotemCode.TotemFullscreen', {'minify' : false}))  
  #end
  ## make up the cancel URL for the form cancellation and other cancels
  #set($cancelURL = $doc.getURL())
  #if ($enableEdit)
    ## if editing is enabled, forms should be cancelled to the base edit screen
    #set($cancelURL = $doc.getURL('view', 'showEdit=true'))
  #end
  ## if edit is enabled, add the input and form to save the order of the blocks which will be edited in js
  ## Show the edit button if the user is enabled to edit and the totem is in the view mode
  #if ($hasEdit)
    {{info}}
    #displayTotemActionsLinks()
    {{/info}}

  #end
  #if ($enableEdit)
    {{info}}
    #displayEditTotemConfigurationForm()
    {{/info}}
    ----
    {{info}}
    $services.localization.render('totem.edit.editorder.info')
    #displayEditOrderForm($editURL)
    {{/info}}
  #end
  ## view mode of a totem
  ## get all the objects of type TotemBlockClass in the order defined in here and display them with the macro
  #set($blockNumbers = $doc.getObject('TotemCode.TotemClass').getProperty('blockOrder').value.split(','))
  ## remember the displayed blocks, so that we can display all undisplayed blocks after the order read
  #set($displayedBlocks = [])
  (%class="container-fluid"%)(((
    (%class="totemBlocks #if($enableEdit)totemBlocksEdit#end row" id="totemBlocks"%)(((
      #set($isOdd = true)
      #foreach($blockNumber in $blockNumbers)
        #set($intNumber = $mathtool.toInteger($blockNumber))
        #set($totemBlock = $doc.getObject('TotemCode.TotemBlockClass', $intNumber))
        #set($totemBlockSize = 12 )
        #if("$!{totemBlock.size}" != "")
          #set($totemBlockSize = ${totemBlock.size})
        #end
        #if ($totemBlock)
          #set($urlBackground = $doc.getAttachmentURL("${totemBlock.getValue('background-image')}"))
          #set($blocktype = $totemBlock.getProperty('type').value)
          (%class="totemBlock #if($isOdd)totemBlock-odd#{else}totemBlock-even#end col-sm-${totemBlockSize}" id="totemBlock_${totemBlock.number}" style="background:url($!{urlBackground});  background-size: 100% 100%; background-position: center center; background-color: $!{totemBlock.background-color}; color: $!{totemBlock.text-color}; object-fit: cover; #if(${blocktype} == 'DisplayerCode.MultImgCarouselDisplayer' || ${blocktype} == 'DisplayerCode.CarouselDisplayer') padding-bottom: 0; #else padding-bottom: 20px; #end"%)(((
            #displayTotemBlock($totemBlock, $enableEdit, $cancelURL, $editURL $totemItemClass, $sheetFieldsMapping, $totemItemsURL)
          )))
          #set($discard = $displayedBlocks.add($totemBlock.number))
          #set($isOdd = !$isOdd)
        #end
      #end
      ## for all the blocks that were not displayed before, display them
      #foreach($totemLeftBlock in $doc.getObjects('TotemCode.TotemBlockClass'))
        #set($totemBlockSize = 12 )
        #if("$!{totemLeftBlock.size}" != "")
          #set($totemBlockSize = ${totemLeftBlock.size})
        #end
        #if(!$displayedBlocks.contains($totemLeftBlock.number))
          #set($urlBackground = $doc.getAttachmentURL("${totemLeftBlock.getValue('background-image')}"))
          #set($blocktype = $totemBlock.getProperty('type').value)
          (%class="totemBlock #if($isOdd)totemBlock-odd#{else}totemBlock-even#end col-sm-${totemBlockSize}" id="totemBlock_${totemLeftBlock.number}" style="background:url($!{urlBackground});  background-size: 100% 100%; background-position: center center; background-color: $!{totemLeftBlock.background-color}; color: $!{totemLeftBlock.text-color}; object-fit: cover; #if(${blocktype} == 'DisplayerCode.MultImgCarouselDisplayer' || ${blocktype} == 'DisplayerCode.CarouselDisplayer') padding-bottom: 0; #else padding-bottom: 20px; #end"%)(((
            #displayTotemBlock($totemLeftBlock, $enableEdit, $cancelURL, $editURL $totemItemClass, $sheetFieldsMapping, $totemItemsURL)
          )))
          #set($discard = $displayedBlocks.add($totemBlock.number))
          #set($isOdd = !$isOdd)
        #end
      #end
    )))
  )))

  {{html clean="false"}}#template("textarea_wysiwyg.vm"){{/html}}
#else
  ## if we're in edit mode, send a redirect to the edit screen, since the totem has a special edit form (available in view).
  $response.sendRedirect("$editURL")
#end

{{html}}
&lt;input type="hidden" id="redirectURL" value="$doc.getURL('view','showEdit=true')"/&gt;
&lt;input type="hidden" value="$doc.getDocumentReference()" id="totemDocRef"/&gt;
{{/html}}

## Show the edit button if the user is enabled to edit and the totem is in the view mode
#if ($hasEdit)
  {{info}}
  #displayTotemActionsLinks()
  {{/info}}
#end
{{/velocity}}</content>
</xwikidoc>
